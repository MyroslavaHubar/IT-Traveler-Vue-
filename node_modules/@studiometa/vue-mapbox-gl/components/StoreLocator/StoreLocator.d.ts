export type StoreLocatorItem = {
    lat: number;
    lng: number;
    id: string;
} & Record<string, unknown>;
declare const _default: __VLS_WithTemplateSlots<import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    /**
     * A list of items to display.
     * The only required properties are `lat` and `lng` and `id`.
     * @type {Array<{ lat: number, lng: number, id: string } & Record<string, unknown>>}
     */
    items: {
        type: ArrayConstructor;
        required: true;
    };
    /**
     * The zoom level to use when zooming in on an item.
     * @type {number}
     */
    itemZoomLevel: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * A Mapbox access token.
     * @type {object}
     */
    accessToken: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Props for the MapboxMap component.
     * @see  https://vue-mapbox-gl.meta.fr/components/MapboxMap.html#props
     * @type {object}
     */
    mapboxMap: {
        type: ObjectConstructor;
        default: () => {};
    };
    /**
     * Props fof the MapboxCluster component.
     * @see  https://vue-mapbox-gl.meta.fr/components/MapboxCluster.html#props
     * @type {object}
     */
    mapboxCluster: {
        type: ObjectConstructor;
        default: () => {};
    };
    /**
     * Props for the MapboxGeocoder component.
     * @see  https://vue-mapbox-gl.meta.fr/components/MapboxGeocoder.html#props
     * @type {object}
     */
    mapboxGeocoder: {
        type: ObjectConstructor;
        default: () => {};
    };
    /**
     * Configuration for each transition component.
     * @type {object}
     */
    transitions: {
        type: ObjectConstructor;
        default: () => {
            loader: {
                map: {};
                search: {};
                list: {};
                default: {};
            };
            panel: {};
        };
    };
    /**
     * Define custom classes for each element of the component.
     * @type {object}
     */
    classes: {
        type: ObjectConstructor;
        default: () => {
            root: string;
            region: {
                map: string[];
                search: string[];
                list: string[];
                panel: string[];
            };
            map: string;
            search: string;
            list: string;
            listItem: string;
            panel: string;
        };
    };
    /**
     * Filter items callback function
     * @type {Function}
     */
    filterItemsCallback: {
        type: (BooleanConstructor | FunctionConstructor)[];
        default: boolean;
    };
    /**
     * Disable the zoom when clicking on a Feature.
     */
    disableFeatureClickZoom: BooleanConstructor;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "geocoder-created": (...args: any[]) => void;
    "map-created": (...args: any[]) => void;
    "map-load": (...args: any[]) => void;
    "select-item": (...args: any[]) => void;
    "cluster-feature-click": (...args: any[]) => void;
    "cluster-feature-mouseenter": (...args: any[]) => void;
    "cluster-feature-mouseleave": (...args: any[]) => void;
    "cluster-cluster-click": (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    /**
     * A list of items to display.
     * The only required properties are `lat` and `lng` and `id`.
     * @type {Array<{ lat: number, lng: number, id: string } & Record<string, unknown>>}
     */
    items: {
        type: ArrayConstructor;
        required: true;
    };
    /**
     * The zoom level to use when zooming in on an item.
     * @type {number}
     */
    itemZoomLevel: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * A Mapbox access token.
     * @type {object}
     */
    accessToken: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Props for the MapboxMap component.
     * @see  https://vue-mapbox-gl.meta.fr/components/MapboxMap.html#props
     * @type {object}
     */
    mapboxMap: {
        type: ObjectConstructor;
        default: () => {};
    };
    /**
     * Props fof the MapboxCluster component.
     * @see  https://vue-mapbox-gl.meta.fr/components/MapboxCluster.html#props
     * @type {object}
     */
    mapboxCluster: {
        type: ObjectConstructor;
        default: () => {};
    };
    /**
     * Props for the MapboxGeocoder component.
     * @see  https://vue-mapbox-gl.meta.fr/components/MapboxGeocoder.html#props
     * @type {object}
     */
    mapboxGeocoder: {
        type: ObjectConstructor;
        default: () => {};
    };
    /**
     * Configuration for each transition component.
     * @type {object}
     */
    transitions: {
        type: ObjectConstructor;
        default: () => {
            loader: {
                map: {};
                search: {};
                list: {};
                default: {};
            };
            panel: {};
        };
    };
    /**
     * Define custom classes for each element of the component.
     * @type {object}
     */
    classes: {
        type: ObjectConstructor;
        default: () => {
            root: string;
            region: {
                map: string[];
                search: string[];
                list: string[];
                panel: string[];
            };
            map: string;
            search: string;
            list: string;
            listItem: string;
            panel: string;
        };
    };
    /**
     * Filter items callback function
     * @type {Function}
     */
    filterItemsCallback: {
        type: (BooleanConstructor | FunctionConstructor)[];
        default: boolean;
    };
    /**
     * Disable the zoom when clicking on a Feature.
     */
    disableFeatureClickZoom: BooleanConstructor;
}>> & Readonly<{
    "onGeocoder-created"?: (...args: any[]) => any;
    "onMap-created"?: (...args: any[]) => any;
    "onMap-load"?: (...args: any[]) => any;
    "onSelect-item"?: (...args: any[]) => any;
    "onCluster-feature-click"?: (...args: any[]) => any;
    "onCluster-feature-mouseenter"?: (...args: any[]) => any;
    "onCluster-feature-mouseleave"?: (...args: any[]) => any;
    "onCluster-cluster-click"?: (...args: any[]) => any;
}>, {
    accessToken: string;
    disableFeatureClickZoom: boolean;
    itemZoomLevel: number;
    mapboxMap: Record<string, any>;
    mapboxCluster: Record<string, any>;
    mapboxGeocoder: Record<string, any>;
    transitions: Record<string, any>;
    classes: Record<string, any>;
    filterItemsCallback: boolean | Function;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, HTMLDivElement>, {
    'map-loader'?(_: {}): any;
    loader?(_: {}): any;
    loader?(_: {}): any;
    loader?(_: {}): any;
    'before-map'?(_: {}): any;
    map?(_: {
        map: any;
        geojson: {
            type: string;
            features: {
                type: string;
                geometry: {
                    type: string;
                    coordinates: any[];
                };
                properties: {
                    [x: string]: any;
                };
            }[];
        };
        filteredGeojson: {
            type: string;
            features: {
                type: string;
                geometry: {
                    type: string;
                    coordinates: any[];
                };
                properties: {
                    [x: string]: any;
                };
            }[];
        };
        items: unknown[];
        filteredItems: {
            [x: string]: unknown;
            lat: number;
            lng: number;
            id: string;
        }[];
        selectedItem: {
            [x: string]: unknown;
            lat: number;
            lng: number;
            id: string;
        };
    }): any;
    'after-map'?(_: {}): any;
    'search-loader'?(_: {}): any;
    'before-search'?(_: {
        items: unknown[];
        filteredItems: {
            [x: string]: unknown;
            lat: number;
            lng: number;
            id: string;
        }[];
        selectedItem: {
            [x: string]: unknown;
            lat: number;
            lng: number;
            id: string;
        };
    }): any;
    'after-search'?(_: {
        items: unknown[];
        filteredItems: {
            [x: string]: unknown;
            lat: number;
            lng: number;
            id: string;
        }[];
        selectedItem: {
            [x: string]: unknown;
            lat: number;
            lng: number;
            id: string;
        };
    }): any;
    'list-loader'?(_: {}): any;
    'before-list'?(_: {
        items: unknown[];
        filteredItems: {
            [x: string]: unknown;
            lat: number;
            lng: number;
            id: string;
        }[];
        selectedItem: {
            [x: string]: unknown;
            lat: number;
            lng: number;
            id: string;
        };
    }): any;
    'list-item'?(_: {
        item: {
            [x: string]: unknown;
            lat: number;
            lng: number;
            id: string;
        };
        index: number;
        selectedItem: {
            [x: string]: unknown;
            lat: number;
            lng: number;
            id: string;
        };
    }): any;
    'after-list'?(_: {
        items: unknown[];
        filteredItems: {
            [x: string]: unknown;
            lat: number;
            lng: number;
            id: string;
        }[];
        selectedItem: {
            [x: string]: unknown;
            lat: number;
            lng: number;
            id: string;
        };
        filterFeaturesInView: () => Promise<void>;
    }): any;
    panel?(_: {
        item: {
            [x: string]: unknown;
            lat: number;
            lng: number;
            id: string;
        };
        close: () => any;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
