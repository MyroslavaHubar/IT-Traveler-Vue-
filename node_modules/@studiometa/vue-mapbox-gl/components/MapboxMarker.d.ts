declare const _default: __VLS_WithTemplateSlots<import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    lngLat: {
        type: ArrayConstructor;
        required: boolean;
    };
    popup: {
        type: (ObjectConstructor | BooleanConstructor)[];
        default: boolean;
        bind: boolean;
    };
    element: {
        type: ObjectConstructor | {
            new (): HTMLElement;
            prototype: HTMLElement;
        };
        default: any;
    };
    offset: {
        type: (ArrayConstructor | typeof import('mapbox-gl').Point)[];
        default: any;
    };
    anchor: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: any;
    };
    scale: {
        type: NumberConstructor;
        default: number;
    };
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    rotation: {
        type: NumberConstructor;
        default: number;
    };
    pitchAlignment: {
        type: StringConstructor;
        default: string;
    };
    rotationAlignment: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Do not render the popup on the map.
     * @type {object}
     */
    renderless: {
        type: BooleanConstructor;
        default: boolean;
        bind: boolean;
    };
}>, {
    marker: import('vue').ShallowRef<any, any>;
    popup: import('vue').ComputedRef<any>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, any, string, import('vue').PublicProps, any, {
    anchor: string;
    draggable: boolean;
    offset: unknown[] | import('mapbox-gl').Point;
    renderless: boolean;
    popup: boolean | Record<string, any>;
    element: any;
    color: string;
    scale: number;
    rotation: number;
    pitchAlignment: string;
    rotationAlignment: string;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {
    contentRef: HTMLDivElement;
    popupRef: any;
}, HTMLDivElement>, {
    default?(_: {}): any;
    popup?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
