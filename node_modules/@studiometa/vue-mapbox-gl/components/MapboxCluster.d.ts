declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    /**
     * The source of the data for the clustered points,
     * must be a String or an Object of GeoJSON format.
     * @type {string | GeoJSON}
     */
    data: {
        type: (ObjectConstructor | StringConstructor)[];
        required: boolean;
    };
    /**
     * The max zoom to cluster points on
     * @type {number}
     */
    clusterMaxZoom: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * Radius of each cluster when clustering point
     * @type {number}
     */
    clusterRadius: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * Minimum number of points necessary to form a cluster.
     * @type {number}
     */
    clusterMinPoints: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * An object defining custom properties on the generated clusters.
     * @see  https://docs.mapbox.com/style-spec/reference/sources/#geojson-clusterProperties
     * @see  https://docs.mapbox.com/mapbox-gl-js/example/cluster-html/
     * @type {object}
     */
    clusterProperties: {
        type: ObjectConstructor;
        default: () => {};
    };
    /**
     * The layout configuration for the clusters circles
     * @see  https://docs.mapbox.com/mapbox-gl-js/example/cluster/
     * @type {object}
     */
    clustersLayout: {
        type: ObjectConstructor;
        default: () => {};
    };
    /**
     * The paint configuration for the clusters circles
     * @see  https://docs.mapbox.com/mapbox-gl-js/example/cluster/
     * @type {object}
     */
    clustersPaint: {
        type: ObjectConstructor;
        default: () => {
            'circle-color': string;
            'circle-radius': number;
        };
    };
    /**
     * The layout configuration for the clusters count
     * @see  https://docs.mapbox.com/mapbox-gl-js/example/cluster/
     * @type {object}
     */
    clusterCountLayout: {
        type: ObjectConstructor;
        default: () => {
            'text-field': string[];
        };
    };
    /**
     * The paint configuration for the clusters count
     * @see  https://docs.mapbox.com/mapbox-gl-js/example/cluster/
     * @type {object}
     */
    clusterCountPaint: {
        type: ObjectConstructor;
        default: () => {
            'text-color': string;
        };
    };
    /**
     * The type of the unclustered points layer
     * @see  https://docs.mapbox.com/mapbox-gl-js/example/cluster/
     * @type {string}
     */
    unclusteredPointLayerType: {
        type: StringConstructor;
        default: string;
    };
    /**
     * The layout configuration for the unclustered points
     * @see  https://docs.mapbox.com/mapbox-gl-js/example/cluster/
     * @type {object}
     */
    unclusteredPointLayout: {
        type: ObjectConstructor;
        default: () => {};
    };
    /**
     * The paint configuration for the unclustered points
     * @see  https://docs.mapbox.com/mapbox-gl-js/example/cluster/
     * @type {object}
     */
    unclusteredPointPaint: {
        type: ObjectConstructor;
        default: () => {
            'circle-color': string;
            'circle-radius': number;
        };
    };
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, any, string, import('vue').PublicProps, any, {
    clusterMaxZoom: number;
    clusterRadius: number;
    clusterMinPoints: number;
    clusterProperties: Record<string, any>;
    clustersLayout: Record<string, any>;
    clustersPaint: Record<string, any>;
    clusterCountLayout: Record<string, any>;
    clusterCountPaint: Record<string, any>;
    unclusteredPointLayerType: string;
    unclusteredPointLayout: Record<string, any>;
    unclusteredPointPaint: Record<string, any>;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, HTMLDivElement>;
export default _default;
