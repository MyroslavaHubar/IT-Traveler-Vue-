import { Map } from 'mapbox-gl';
declare const _default: __VLS_WithTemplateSlots<import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    accessToken: {
        type: StringConstructor;
        default: string;
    };
    container: {
        type: (StringConstructor | {
            new (): HTMLElement;
            prototype: HTMLElement;
        })[];
        default: any;
    };
    minZoom: {
        type: NumberConstructor;
        default: number;
    };
    maxZoom: {
        type: NumberConstructor;
        default: number;
    };
    minPitch: {
        type: NumberConstructor;
        default: number;
    };
    maxPitch: {
        type: NumberConstructor;
        default: number;
    };
    mapStyle: {
        type: (ObjectConstructor | StringConstructor)[];
        required: boolean;
    };
    hash: {
        type: BooleanConstructor;
        default: boolean;
    };
    interactive: {
        type: BooleanConstructor;
        default: boolean;
    };
    bearingSnap: {
        type: NumberConstructor;
        default: number;
    };
    pitchWithRotate: {
        type: BooleanConstructor;
        default: boolean;
    };
    clickTolerance: {
        type: NumberConstructor;
        default: number;
    };
    attributionControl: {
        type: BooleanConstructor;
        default: boolean;
    };
    customAttribution: {
        type: (ArrayConstructor | StringConstructor)[];
        default: any;
    };
    logoPosition: {
        type: StringConstructor;
        default: string;
    };
    failIfMajorPerformanceCaveat: {
        type: BooleanConstructor;
        default: boolean;
    };
    preserveDrawingBuffer: {
        type: BooleanConstructor;
        default: boolean;
    };
    antialias: {
        type: BooleanConstructor;
        default: boolean;
    };
    refreshExpiredTiles: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxBounds: {
        type: (ArrayConstructor | typeof import('mapbox-gl').LngLatBounds)[];
        default: any;
    };
    scrollZoom: {
        type: (ObjectConstructor | BooleanConstructor)[];
        default: boolean;
    };
    boxZoom: {
        type: BooleanConstructor;
        default: boolean;
    };
    dragRotate: {
        type: BooleanConstructor;
        default: boolean;
    };
    dragPan: {
        type: (ObjectConstructor | BooleanConstructor)[];
        default: boolean;
    };
    keyboard: {
        type: BooleanConstructor;
        default: boolean;
    };
    doubleClickZoom: {
        type: BooleanConstructor;
        default: boolean;
    };
    touchZoomRotate: {
        type: (ObjectConstructor | BooleanConstructor)[];
        default: boolean;
    };
    trackResize: {
        type: BooleanConstructor;
        default: boolean;
    };
    center: {
        type: (ObjectConstructor | ArrayConstructor | typeof import('mapbox-gl').LngLat)[];
        default: () => number[];
    };
    zoom: {
        type: NumberConstructor;
        default: number;
    };
    bearing: {
        type: NumberConstructor;
        default: number;
    };
    pitch: {
        type: NumberConstructor;
        default: number;
    };
    bounds: {
        type: (ArrayConstructor | typeof import('mapbox-gl').LngLatBounds)[];
        default: any;
    };
    fitBoundsOptions: {
        type: ObjectConstructor;
        default: any;
    };
    renderWorldCopies: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxTileCacheSize: {
        type: NumberConstructor;
        default: any;
    };
    localIdeographFontFamily: {
        type: StringConstructor;
        default: string;
    };
    transformRequest: {
        type: FunctionConstructor;
        default: any;
    };
    collectResourceTiming: {
        type: BooleanConstructor;
        default: boolean;
    };
    fadeDuration: {
        type: NumberConstructor;
        default: number;
    };
    crossSourceCollisions: {
        type: BooleanConstructor;
        default: boolean;
    };
    cooperativeGestures: {
        type: BooleanConstructor;
    };
    language: {
        type: (ArrayConstructor | StringConstructor)[];
        default: any;
    };
    locale: {
        type: ObjectConstructor;
        default: any;
    };
    localFontFamily: {
        type: (StringConstructor | BooleanConstructor)[];
        default: boolean;
    };
    minTileCacheSize: {
        type: NumberConstructor;
        default: any;
    };
    optimizeForTerrain: {
        type: BooleanConstructor;
        default: boolean;
    };
    performanceMetricsCollection: {
        type: BooleanConstructor;
        default: boolean;
    };
    projection: {
        type: (ObjectConstructor | StringConstructor)[];
        default: string;
    };
    testMode: {
        type: BooleanConstructor;
        default: boolean;
    };
    touchPitch: {
        type: (ObjectConstructor | BooleanConstructor)[];
        default: boolean;
    };
    useWebGL2: {
        type: BooleanConstructor;
        default: boolean;
    };
    worldview: {
        type: StringConstructor;
        default: any;
    };
}>, {
    map: import('vue').ShallowRef<Map, Map>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, any, string, import('vue').PublicProps, any, {
    accessToken: string;
    zoom: number;
    language: string | unknown[];
    pitch: number;
    container: string | HTMLElement;
    minZoom: number;
    maxZoom: number;
    minPitch: number;
    maxPitch: number;
    hash: boolean;
    interactive: boolean;
    bearingSnap: number;
    pitchWithRotate: boolean;
    clickTolerance: number;
    attributionControl: boolean;
    customAttribution: string | unknown[];
    logoPosition: string;
    failIfMajorPerformanceCaveat: boolean;
    preserveDrawingBuffer: boolean;
    antialias: boolean;
    refreshExpiredTiles: boolean;
    maxBounds: unknown[] | import('mapbox-gl').LngLatBounds;
    scrollZoom: boolean | Record<string, any>;
    boxZoom: boolean;
    dragRotate: boolean;
    dragPan: boolean | Record<string, any>;
    keyboard: boolean;
    doubleClickZoom: boolean;
    touchZoomRotate: boolean | Record<string, any>;
    trackResize: boolean;
    center: unknown[] | Record<string, any> | import('mapbox-gl').LngLat;
    bearing: number;
    bounds: unknown[] | import('mapbox-gl').LngLatBounds;
    fitBoundsOptions: Record<string, any>;
    renderWorldCopies: boolean;
    maxTileCacheSize: number;
    localIdeographFontFamily: string;
    transformRequest: Function;
    collectResourceTiming: boolean;
    fadeDuration: number;
    crossSourceCollisions: boolean;
    cooperativeGestures: boolean;
    locale: Record<string, any>;
    localFontFamily: string | boolean;
    minTileCacheSize: number;
    optimizeForTerrain: boolean;
    performanceMetricsCollection: boolean;
    projection: string | Record<string, any>;
    testMode: boolean;
    touchPitch: boolean | Record<string, any>;
    useWebGL2: boolean;
    worldview: string;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {
    root: HTMLDivElement;
}, any>, {
    default?(_: {}): any;
    loader?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
